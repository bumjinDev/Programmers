package Algorithm;

/* 트리 자료 구조 : 
* 트리 자료구조는 시스템 또는 기능을 계층적인 관계로 나타내고 필요한 내용을 저장 및 관리하는 데 사용되는 자료구조이다.
* 각 노드는 자신만의 서브트리를 가지며, 이를 통해 전체 시스템을 계층적으로 구성할 수 있다, 이는 마치 리눅스 파일 시스템처럼, 각 디렉토리가 독립적인 기능(리눅스 디렉토리 /opt/Tomcat)을
* 수행하는 것처럼, 트리의 각 노드는 특정 기능을 담당하는 서브 시스템으로 볼 수 있다. 그렇기 때문에 트리는 내부적으로 각 서브트리 단위로 시스템 및 데이터를 계층적으로 표현 및 저장하여 관리하고
* 데이터 간의 관계를 명확하게 파악할 수 있도록 돕고, 효율적인 검색, 삽입, 삭제 연산을 지원한다.
* 트리 탐색은 각 노드를 루트로 하는 서브트리를 순회하며 이루어지며, 전위, 중위, 후위 탐색 등 다양한 순회 방법을 적용할 수 있습니다.
* 이진 트리, 이진 탐색 트리 등 다양한 종류의 트리가 있으며, 각각의 특징에 따라 적절한 자료 구조를 선택하여 사용할 수 있습니다.
*/

/*
  - 이진 트리 공통 탐색 로직 : 
	  모든 탐색은 재귀 호출을 반복하며 진행됩니다. 탐색 과정에서 각 노드는 서브트리의 루트 노드로 간주되며, 탐색을 이어 나간다.
	  탐색 방향은 왼쪽 노드를 우선적으로 재귀 호출하여 탐색하며. 만약 현재 서브트리의 루트 노드의 왼쪽 노드가 null일 경우, 오른쪽 노드를 탐색한다. 오른쪽 노드가 존재할 경우 해당 노드로 이동하여, 	그 노드를 새로운 서브트리의 루트 노드로 간주하고 왼쪽 노드를 순차적으로 탐색합니다.
	  
	  중요한 점은 전위 탐색, 중위 탐색, 후위 탐색 모두 위의 공통된 방향 따른 탐색을 이어 나가는데 탐색 순서에 대한 상세한 차이점은 모든 탐색 로직 자체는 위 로직에 따라서 왼쪽을 우선적으로 탐색하나	왼쪽 탐색하면서 확인되는 각각의 서브트리에 대한 루트 노드로 인식됨에 따라 탐색하는 방법이 달라진다.
	 
	 
  - 전위 탐색 로직 :
	1. 탐색 과정 중 모든 서브 트리의 루트 노드를 우선적으로 탐색하기 때문에 모든 탐색 과정 중 거쳐가는 서브트리별 루트노드는 찾을 때 마다 즉각적으로 데이터를 추출해 낸다.
	2. 순차적으로 탐색하면서 왼쪽 노드 링크가 null 이라면 우측 노드 링크를 따라가서 해당 노드를 서브트리의 루트노드로써 인식하여 재귀함수를 호출하여 위 과정을 반복한다.
	3. 리프노드까지 도달하여 더 이상 왼쪽 노드 및 우측 노드도 없다면 재귀함수를 복귀하여 순차적으로 이전 단계의 서브트리 노드로 복귀한다.
	4. 위 과정을 반복하여 탐색을 하여 지정된 값을 지정된 배열 또는 ArrayList 내 순차적으로 저장한다.
 */

public class MyTree {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
